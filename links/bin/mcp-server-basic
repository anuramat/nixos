#!/usr/bin/env python3

import asyncio
import logging
from typing import Any, Sequence

from mcp.server import Server
from mcp.server.models import InitializationOptions
from mcp.server.stdio import stdio_server
from mcp.types import (
    Prompt,
    PromptArgument,
    PromptMessage,
    TextContent,
    ServerCapabilities,
)

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("mcp-server-basic")

# Create server instance
server = Server("mcp-server-basic")

@server.list_prompts()
async def handle_list_prompts() -> list[Prompt]:
    """
    List available prompts.
    Each prompt can have arguments to customize the output.
    """
    return [
        Prompt(
            name="basic-prompt",
            description="A basic static prompt for demonstration",
            arguments=[
                PromptArgument(
                    name="topic",
                    description="The topic to focus on",
                    required=False,
                )
            ],
        )
    ]

@server.get_prompt()
async def handle_get_prompt(name: str, arguments: dict[str, str] | None) -> PromptMessage:
    """
    Return the actual prompt content.
    """
    if name != "basic-prompt":
        raise ValueError(f"Unknown prompt: {name}")
    
    topic = arguments.get("topic", "general software development") if arguments else "general software development"
    
    prompt_text = f"""You are an expert software engineer specializing in {topic}.

Your task is to provide clear, practical, and well-reasoned advice on technical problems.

Key principles:
- Write clean, maintainable code
- Follow best practices and established patterns
- Consider performance and security implications
- Provide explanations for your recommendations
- Include relevant examples when helpful

Please be thorough but concise in your responses."""

    return PromptMessage(
        role="user",
        content=TextContent(
            type="text",
            text=prompt_text
        )
    )

async def main():
    # Run the server using stdin/stdout streams
    async with stdio_server() as (read_stream, write_stream):
        await server.run(
            read_stream,
            write_stream,
            InitializationOptions(
                server_name="mcp-server-basic",
                server_version="0.1.0",
                capabilities=ServerCapabilities(
                    prompts={}
                ),
            ),
        )

if __name__ == "__main__":
    asyncio.run(main())