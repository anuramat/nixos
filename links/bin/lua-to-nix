#!/usr/bin/env bash

# Read lua from stdin, convert to nix attrset via JSON
# Usage: echo "return { foo = 'bar', baz = 42 }" | ./lua-to-nix.sh

set -euo pipefail

# Create temp files
lua_file=$(mktemp)
json_file=$(mktemp)
trap 'rm -f "$lua_file" "$json_file"' EXIT

# Read stdin to lua file
cat <(echo "return") - | sed '$ s/,\s*$//' > "$lua_file"

# Convert lua to JSON
lua -e "
function encode_value(val)
  if type(val) == 'string' then
    return '\"' .. val:gsub('\"', '\\\\\"') .. '\"'
  elseif type(val) == 'number' or type(val) == 'boolean' then
    return tostring(val)
  elseif type(val) == 'table' then
    local is_array = true
    local max_index = 0
    for k, v in pairs(val) do
      if type(k) ~= 'number' or k <= 0 or k ~= math.floor(k) then
        is_array = false
        break
      end
      max_index = math.max(max_index, k)
    end
    
    if is_array then
      local items = {}
      for i = 1, max_index do
        items[i] = encode_value(val[i])
      end
      return '[' .. table.concat(items, ',') .. ']'
    else
      local items = {}
      for k, v in pairs(val) do
        table.insert(items, '\"' .. k .. '\":' .. encode_value(v))
      end
      return '{' .. table.concat(items, ',') .. '}'
    end
  end
  return 'null'
end

local chunk = loadfile('$lua_file')
if chunk then
  local result = chunk()
  print(encode_value(result))
else
  error('Failed to load lua file')
end
" > "$json_file"

# Convert JSON to Nix
nix eval --impure --raw --expr "
let
  json = builtins.fromJSON (builtins.readFile $json_file);
  
  toNixValue = val:
    if builtins.isString val then
      \"\\\"\" + val + \"\\\"\"
    else if builtins.isBool val then
      if val then \"true\" else \"false\"
    else if builtins.isInt val || builtins.isFloat val then
      toString val
    else if builtins.isList val then
      \"[ \" + (builtins.concatStringsSep \" \" (map toNixValue val)) + \" ]\"
    else if builtins.isAttrs val then
      \"{ \" + (builtins.concatStringsSep \" \" 
        (builtins.attrValues 
          (builtins.mapAttrs (k: v: k + \" = \" + toNixValue v + \";\") val))) + \" }\"
    else
      toString val;
in
toNixValue json
"
