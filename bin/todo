#!/usr/bin/env python3

from collections import defaultdict
from itertools import zip_longest
import argparse
from math import ceil
import os
import re
import sys

TASK_FILE = os.path.expanduser("~/notes/todo.txt")

TERM_HEIGHT_OFFSET = 5  # terminal prompt etc
MIN_CELL_HEIGHT = 10
MIN_CELL_WIDTH = 30


def add(line):
    with open(TASK_FILE, "a") as file:
        file.write(line + "\n")


def rm(task_number):
    lines = _read()

    if task_number < 1 or task_number > len(lines):
        print("invalid n")
        return

    del lines[task_number - 1]
    _write(lines)


def norm():
    raw_lines = _read()
    exp = r"\s*$"
    pattern = re.compile(exp)

    # remove empty lines and whitespace suffixes
    clean_lines = []
    for line in raw_lines:
        new_line = pattern.sub("", line)
        if new_line:
            clean_lines.append(new_line + "\n")

    _write(_deduplicate_lines(clean_lines))


def _deduplicate_lines(lines: list[str]) -> list[str]:
    seen = set()
    result = []
    for line in lines:
        if line not in seen:
            result.append(line)
    return result


def _read(filename=TASK_FILE):
    with open(filename, "r") as file:
        return file.readlines()


def _write(lines, filename=TASK_FILE):
    with open(filename, "w") as file:
        file.writelines(lines)


def ls():
    lines = _read()
    result = _index(lines)
    print("\n".join(result))


def _index(lines: list[str]) -> list[str]:
    # TODO rewrite
    w = len(str(len(lines)))
    result = []
    for i, line in enumerate(lines, 1):
        result.append(f"{str(i).rjust(w)} {line.strip()}")
    return result


def _get_tag_dict(tasks: list[str]):
    exp = r"(?<!\S)@\S+"
    pattern = re.compile(exp)
    tasks_by_tags = defaultdict(list)
    for task in tasks:
        tags = pattern.findall(task)
        task = task.rstrip()
        for tag in tags:
            tasks_by_tags[tag].append(task)
        if len(tags) == 0:
            tasks_by_tags["unfiled"].append(task)
    return tasks_by_tags


def _shorten(line: str, symbol: str, max_width: int):
    # very long line -> very long li~
    if len(symbol) > max_width:
        raise ValueError
    if len(line) > max_width:
        return line[: max_width - len(symbol)] + symbol
    return line


def ls_tag(item):
    if item == "@":
        item = "unfiled"
    file_lines = _index(_read())
    lines_by_tags = _get_tag_dict(file_lines)
    print("\n".join(lines_by_tags[item]))


def tag_overview():
    file_lines = _index(_read())
    lines_by_tags = _get_tag_dict(file_lines)

    term_x, term_y = os.get_terminal_size()

    header = "-" * (term_x // 2) + "TAGS"
    header += (term_x - len(header)) * "-"

    n_x = term_x // MIN_CELL_WIDTH
    n_y = ceil(len(lines_by_tags) / n_x)

    w = term_x // n_x
    h = max(
        MIN_CELL_HEIGHT,
        (
            term_y - TERM_HEIGHT_OFFSET - (n_y - 1) - 1
        )  # subtracting prompt, spacing, and main header
        // n_y,
    )

    cells_lines = []
    for tag in lines_by_tags:
        lines = lines_by_tags[tag]
        heading = f"{tag}: {len(lines_by_tags[tag])}"
        underline = len(heading) * "-"
        lines = ([heading, underline] + lines)[:h]
        lines += [""] * (h - len(lines))  # exact cell height
        lines = [_shorten(i, "~", w - 1).ljust(w) for i in lines]  # exact line width
        cells_lines.append(lines)

    cells_by_columns = [[] for _ in range(n_x)]
    for i, v in enumerate(cells_lines):
        cells_by_columns[i % n_x].append(v + [""])
    column_lines = [sum(i, []) for i in cells_by_columns]

    zipped_columns = zip_longest(*column_lines, fillvalue=(" " * w))
    final_lines = ["".join(str(item) for item in row) for row in zipped_columns]
    final_lines = final_lines[:-1]  # remove last padding line
    result = "\n".join(final_lines)

    print(header + result)


def merge(left_name: str, root_name: str, right_name: str):
    # to be used as git merge driver
    left_lines = _read(left_name)
    right_lines = _read(right_name)
    root = set(_read(root_name))
    left = set(left_lines)
    right = set(right_lines)

    # keep intersection -- old tasks (or rarely -- added in both revisions)
    # (union - intersection) -- either added in one or removed in the other:
    # check if it was in root: if it was, then it was removed => drop;
    # otherwise it was added => keep
    unchanged = left & right
    diff = (left | right) - unchanged
    new = diff - root
    keep = unchanged | new

    result = []
    for line in left_lines + right_lines:
        if line in keep:
            result.append(line)
            keep.remove(line)

    _write(result, left_name)


def main():
    parser = argparse.ArgumentParser(prog="task")

    subparsers = parser.add_subparsers(dest="command")

    add_parser = subparsers.add_parser("add", help="Add a new task")
    add_parser.add_argument("task_text", type=str, help="Task description")

    done_parser = subparsers.add_parser("rm", help="Mark a task as done")
    done_parser.add_argument("task_number", type=int, help="Task number to remove")

    subparsers.add_parser("ls", help="List all tasks")

    subparsers.add_parser("norm", help="Normalize the file")

    merge_parser = subparsers.add_parser("merge", help="Merge")
    merge_parser.add_argument("left", type=str, help="Current version (%%A)")
    merge_parser.add_argument("root", type=str, help="Common ancestor's version (%%O)")
    merge_parser.add_argument("right", type=str, help="Other branches' (%%B)")

    if len(sys.argv) > 1 and (item := sys.argv[1]).startswith("@"):
        ls_tag(item)
        return

    args = parser.parse_args()

    if args.command == "add":
        add(args.task_text)
    elif args.command == "rm":
        rm(args.task_number)
    elif args.command == "ls":
        ls()
    elif args.command == "norm":
        norm()
    elif args.command == "merge":
        merge(args.left, args.root, args.right)
    else:
        tag_overview()


if __name__ == "__main__":
    main()
